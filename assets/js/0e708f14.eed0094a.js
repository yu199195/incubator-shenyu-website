"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[1576],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),p=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,f=c["".concat(u,".").concat(g)]||c[g]||d[g]||a;return n?i.createElement(f,l(l({ref:t},s),{},{components:n})):i.createElement(f,l({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},86349:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),l=["components"],o={sidebar_position:1,title:"Divide Plugin",keywords:["divide"],description:"divide plugin"},u=void 0,p={unversionedId:"plugins/divide-plugin",id:"version-2.3.0/plugins/divide-plugin",isDocsHomePage:!1,title:"Divide Plugin",description:"divide plugin",source:"@site/versioned_docs/version-2.3.0/plugins/divide-plugin.md",sourceDirName:"plugins",slug:"/plugins/divide-plugin",permalink:"/docs/2.3.0/plugins/divide-plugin",editUrl:"https://github.com/apache/incubator-shenyu-website/edit/main/versioned_docs/version-2.3.0/plugins/divide-plugin.md",version:"2.3.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Divide Plugin",keywords:["divide"],description:"divide plugin"},sidebar:"version-2.3.0/tutorialSidebar",previous:{title:"Quick start with Tars",permalink:"/docs/2.3.0/quick-start/quick-start-tars"},next:{title:"Dubbo Plugin",permalink:"/docs/2.3.0/plugins/dubbo-plugin"}},s=[{value:"Explanation",id:"explanation",children:[]},{value:"Plugin Setting",id:"plugin-setting",children:[]},{value:"Plugin Detail",id:"plugin-detail",children:[]}],d={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"explanation"},"Explanation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Divide")," is the core processing plugin for gateway to process ",(0,a.kt)("inlineCode",{parentName:"li"},"http")," requests.")),(0,a.kt)("h2",{id:"plugin-setting"},"Plugin Setting"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Enable plugin, ",(0,a.kt)("inlineCode",{parentName:"p"},"soul-admin")," --\x3e plugin management--\x3e ",(0,a.kt)("inlineCode",{parentName:"p"},"divide")," set to enable.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Divide plugin\uff0ccooperate with ",(0,a.kt)("inlineCode",{parentName:"p"},"starter")," to take effect\uff0cplease refer to\uff1a",(0,a.kt)("a",{parentName:"p",href:"../users-guide/http-proxy"},"user-http"),"\u3002"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"  \x3c!--if you use http proxy start this--\x3e\n   <dependency>\n       <groupId>org.dromara</groupId>\n       <artifactId>soul-spring-boot-starter-plugin-divide</artifactId>\n       <version>${last.version}</version>\n   </dependency>\n\n   <dependency>\n       <groupId>org.dromara</groupId>\n       <artifactId>soul-spring-boot-starter-plugin-httpclient</artifactId>\n       <version>${last.version}</version>\n   </dependency>\n\n")),(0,a.kt)("h2",{id:"plugin-detail"},"Plugin Detail"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Divide is a plugin for http forward proxy, and all http requests are called by this plugin in load balancing."),(0,a.kt)("li",{parentName:"ul"},"Selectors and rules, please refer to: ",(0,a.kt)("a",{parentName:"li",href:"../admin/selector-and-rule"},"selector"),"."),(0,a.kt)("li",{parentName:"ul"},"Http configuration is the real invoked configuration after the gateway matches the traffic; You can set multiple configurations and concrete load balancing weights in the rules.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Configuration Detail:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The first box: hostName, generally fill in ",(0,a.kt)("inlineCode",{parentName:"li"},"localhost"),", which is temporarily unused.  "),(0,a.kt)("li",{parentName:"ul"},"The second box: http protocol, usually fill in ",(0,a.kt)("inlineCode",{parentName:"li"},"http://")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"https://"),", if not, the default is: ",(0,a.kt)("inlineCode",{parentName:"li"},"http://"),"."),(0,a.kt)("li",{parentName:"ul"},"The third box: ip and port, where you fill in the ip+port of your real service."),(0,a.kt)("li",{parentName:"ul"},"The fourth box: load balancing weight.   "))),(0,a.kt)("li",{parentName:"ul"},"Ip + Port Detection",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In soul-admin, there is a scheduled task to scan the configured ip and port. If it is found that the ip and port is offline, it will be removed."),(0,a.kt)("li",{parentName:"ul"},"It can be configured as follows:")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul.upstream.check: true  //Default is ture, if setting false, program will not detect.\nsoul.upstream.scheduledTime: 10  //Timing detection interval, default 10 seconds.\n")))}c.isMDXComponent=!0}}]);