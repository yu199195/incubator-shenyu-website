"use strict";(self.webpackChunkshenyu_website=self.webpackChunkshenyu_website||[]).push([[4699],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},34633:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),s=["components"],i={title:"Register Center Access",keywords:["soul"],description:"register center access"},l=void 0,c={unversionedId:"register-center/register-center-access",id:"version-2.3.0/register-center/register-center-access",isDocsHomePage:!1,title:"Register Center Access",description:"register center access",source:"@site/versioned_docs/version-2.3.0/register-center/register-center-access.md",sourceDirName:"register-center",slug:"/register-center/register-center-access",permalink:"/docs/2.3.0/register-center/register-center-access",editUrl:"https://github.com/apache/incubator-shenyu-website/edit/main/versioned_docs/version-2.3.0/register-center/register-center-access.md",version:"2.3.0",frontMatter:{title:"Register Center Access",keywords:["soul"],description:"register center access"},sidebar:"version-2.3.0/tutorialSidebar",previous:{title:"Use Different Data-Sync Strategy",permalink:"/docs/2.3.0/users-guide/use-data-sync"},next:{title:"Register Center Design",permalink:"/docs/2.3.0/register-center/register-center-design"}},p=[{value:"Explain",id:"explain",children:[]},{value:"HTTP Registry",id:"http-registry",children:[]},{value:"Zookeeper Registry",id:"zookeeper-registry",children:[]},{value:"Etcd Registry",id:"etcd-registry",children:[]},{value:"Consul Registry",id:"consul-registry",children:[]},{value:"Nacos Registry",id:"nacos-registry",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"explain"},"Explain"),(0,a.kt)("p",null,"Explain register center access config"),(0,a.kt)("h2",{id:"http-registry"},"HTTP Registry"),(0,a.kt)("h4",{id:"soul-admin"},"Soul-Admin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: http\n    props:\n      checked: true  # is checked\n      zombieCheckTimes: 5 # How many times does it fail to detect the service\n      scheduledTime: 10 # Timed detection interval time\n")),(0,a.kt)("h4",{id:"soul-client"},"Soul-Client"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: http\n    serverLists: http://localhost:9095\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188\n      isFull: false\n# registerType : register type, set http\n# serverList: when register type is http\uff0cset Soul-Admin address list\uff0cpls note 'http://' is necessary.\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n")),(0,a.kt)("h2",{id:"zookeeper-registry"},"Zookeeper Registry"),(0,a.kt)("h4",{id:"soul-admin-1"},"Soul-Admin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-server-zookeeper</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: zookeeper\n    serverLists : localhost:2181\n    props:\n      sessionTimeout: 5000\n      connectionTimeout: 2000\n")),(0,a.kt)("h4",{id:"soul-client-1"},"Soul-Client"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-client-zookeeper</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: zookeeper\n    serverLists: localhost:2181\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n# registerType : register type, set zookeeper\n# serverList: when register type is zookeeper\uff0cset zookeeper address list\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n")),(0,a.kt)("h2",{id:"etcd-registry"},"Etcd Registry"),(0,a.kt)("h4",{id:"soul-admin-2"},"Soul-Admin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-server-etcd</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: etcd\n    serverLists : http://localhost:2379\n    props:\n      etcdTimeout: 5000\n      etcdTTL: 5\n")),(0,a.kt)("h4",{id:"soul-client-2"},"Soul-Client"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-client-etcd</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: etcd\n    serverLists: http://localhost:2379\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n# registerType : register type, set etcd \n# serverList: when register type is etcd, add etcd address list\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n")),(0,a.kt)("h2",{id:"consul-registry"},"Consul Registry"),(0,a.kt)("h4",{id:"soul-admin-3"},"Soul-Admin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml :")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"               \x3c!--soul-register-server-consul (Default has been added)--\x3e\n               <dependency>\n                   <groupId>org.dromara</groupId>\n                   <artifactId>soul-register-server-consul</artifactId>\n                   <version>${project.version}</version>\n               </dependency>\n\n               \x3c!--spring-cloud-starter-consul-discovery need add by yourself, suggest use 2.2.6.RELEASE version, other version maybe can't work--\x3e\n               <dependency>\n                   <groupId>org.springframework.cloud</groupId>\n                   <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n                   <version>2.2.6.RELEASE</version>\n               </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml, additional need add spring.cloud.consul\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: consul\n    props:\n      delay: 1\n      wait-time: 55\n\nspring:\n  cloud:\n    consul:\n      discovery:\n        instance-id: soul-admin-1\n        service-name: soul-admin\n        tags-as-metadata: false\n      host: localhost\n      port: 8500\n\n# registerType : register type, set consul.\n# delay: The interval of each polling of monitoring metadata, in seconds, the default value is 1 second.\n# wait-time: The waiting time for each polling of metadata monitoring, in seconds, the default value is 55 second.\n# instance-id: Required, Consul needs to find specific services through instance-id.\n# service-name: The name where the service is registered to consul. If not configured, the value of `spring.application.name` will be taken by default.\n# host: Consul server host, the default value is localhost.\n# port: Consul server port, the default value is 8500.\n# tags-as-metadata: false, Required, This option must be set to false, otherwise the URI information will not be found, will cause to selector and upstream cache unable to update.\n\n")),(0,a.kt)("h4",{id:"soul-client-3"},"Soul-Client"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note, consul registry is not compatible with current and SpringCloud will and Eureka / Nacos registry conflicts")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (need add by yourself, suggest use 2.2.6.RELEASE version, other version maybe can't work)\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"            <dependency>\n               <groupId>org.springframework.cloud</groupId>\n               <artifactId>spring-cloud-starter-consul-discovery</artifactId>\n               <version>2.2.6.RELEASE</version>\n           </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml, additional need add spring.cloud.consul\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: consul \n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n\nspring:\n  cloud:\n    consul:\n      discovery:\n        instance-id: soul-http-1\n        service-name: soul-http\n      host: localhost\n      port: 8500\n\n# registerType : register type, set consul.\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc\n# instance-id: Required, Consul needs to find specific services through instance-id.\n# service-name: The name where the service is registered to consul. If not configured, the value of `spring.application.name` will be taken by default.\n# host: Consul server host, the default value is localhost.\n# port: Consul server port, the default value is 8500.\n")),(0,a.kt)("h2",{id:"nacos-registry"},"Nacos Registry"),(0,a.kt)("h4",{id:"soul-admin-4"},"Soul-Admin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-server-nacos</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  register:\n    registerType: nacos\n    serverLists : localhost:8848\n    props:\n      nacosNameSpace: SoulRegisterCenter\n")),(0,a.kt)("h4",{id:"soul-client-4"},"Soul-Client"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add dependency in pom.xml (Default has been added):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>org.dromara</groupId>\n            <artifactId>soul-register-client-nacos</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the config in application.yml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"soul:\n  client:\n    registerType: nacos\n    serverLists: localhost:8848\n    props:\n      contextPath: /http\n      appName: http\n      port: 8188  \n      isFull: false\n      nacosNameSpace: SoulRegisterCenter\n# registerType : register type, set etcd \n# serverList: when register type is etcd, add etcd address list\n# port: your project port number; apply to springmvc/tars/grpc\n# contextPath: your project's route prefix through soul gateway, such as /order \uff0c/product etc\uff0cgateway will route based on it.\n# appName\uff1ayour project name,the default value is`spring.application.name`.\n# isFull: set true means providing proxy for your entire service, or only a few controller. apply to springmvc/springcloud\n# nacosNameSpace: nacos namespace\n")))}d.isMDXComponent=!0}}]);